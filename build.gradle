buildscript {
    repositories {
        maven {
			name 'MixinGradle'
			url 'https://repo.spongepowered.org/repository/maven-public'
		}
    }
    dependencies {
		if (project.use_mixins.toBoolean()) {
			classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
		}
    }
}

plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'wtf.gofancy.fancygradle' version '1.1.+'
}

// apply plugin: 'org.spongepowered.mixin'
if (project.use_mixins.toBoolean()) {
	apply plugin: 'org.spongepowered.mixin'
}

version = project.mod_version
group = project.maven_group
archivesBaseName = project.archives_base_name

java.toolchain.languageVersion = JavaLanguageVersion.of(8)


if (project.use_intellij_idea.toBoolean()) {
	apply {
        plugin 'java'
        plugin 'idea'
    }


    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }
}

if (project.use_eclipse.toBoolean()) {
	apply {
        plugin 'java'
        plugin 'eclipse'
    }


    eclipse {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }
}


minecraft {

    mappings channel: 'stable', version: '39-1.12'

	if (project.has_access_transformer.toBoolean()) {
		accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
	}

    runs {
        client {
            workingDirectory project.file('run')
			if (project.use_coremod.toBoolean()) {
				jvmArg '-Dfml.coreMods.load=' + coremod_plugin_class_name
			}
			if (project.use_mixins.toBoolean()) {
				jvmArg '-Dmixin.hotSwap=true'
				jvmArg '-Dmixin.checks.interfaces=true'
				jvmArg '-Dmixin.debug=true'
			}
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            environment 'MC_VERSION', '1.12.2'
        }

        server {
            workingDirectory project.file('run')
            if (project.use_coremod.toBoolean()) {
				jvmArg '-Dfml.coreMods.load=' + coremod_plugin_class_name
			}
			if (project.use_mixins.toBoolean()) {
				jvmArg '-Dmixin.hotSwap=true'
				jvmArg '-Dmixin.checks.interfaces=true'
			}
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            environment 'MC_VERSION', '1.12.2'
        }
    }
}


repositories {
	maven { 
		url = 'https://maven.cleanroommc.com' 
	}
    maven {
        url = 'https://repo.spongepowered.org/maven'
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'


    if (project.use_mixins.toBoolean()) {
        compileOnly 'zone.rong:mixinbooter:7.0'
        runtimeOnly 'zone.rong:mixinbooter:7.0'

        annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
    }
}

fancyGradle {
    patches {
        resources
        coremods
        asm
    }
}

processJarTask jar

if (project.build_deobfJar.toBoolean()) {
    // Create deobf dev jars
    task deobfJar(type: Jar) {
        archiveClassifier.set("deobf")
        from sourceSets.main.output
    }
    processJarTask deobfJar
}

if (project.build_apiJar.toBoolean()) {
    // Create API library jar
    task apiZip(type: Jar) {
        archiveClassifier.set("api")
        from(sourceSets.main.java) {
            include "name/api/**"
        }
        from(sourceSets.main.output) {
            include "name/api/**"
        }
    }
}

if (project.build_sourceJar.toBoolean()) {
    // Create source jar
    task sourcesJar(type: Jar) {
        archiveClassifier.set("sources")
        from sourceSets.main.allJava
    }
}

// Loading resources, works even on IDE client runs
sourceSets {
    main {
        if (project.use_mixins.toBoolean()) {
            ext.refMap = 'mixins.' + archives_base_name + '.refmap.json'
        }

        java {
            srcDirs = ["src/main/java"]
        }

        resources {
            srcDirs = ["src/main/java", "src/main/resources"]
        }
    }

    test {
        java {
            srcDirs = ["src/test/java"]
        }
        resources {
            srcDirs = ["src/test/resources"]
        }
    }

    // at compile time, put resources in same directories as classes
    main.output.setResourcesDir(main.java.outputDir)
}

artifacts {
    if (project.build_deobfJar.toBoolean()) {
        archives deobfJar
    }
    if (project.build_apiJar.toBoolean()) {
        archives apiZip
    }
    if (project.build_sourceJar.toBoolean()) {
        archives sourcesJar
    }
}

jar.finalizedBy('reobfJar')

processResources {
    // required to allow file expansion later
    duplicatesStrategy = 'include'

    // this will ensure that this task is redone when the versions change.
    inputs.property 'version', version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': version
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

/**
 * Applies required processing to jar tasks
 * @param task the task to process
 */
private void processJarTask(task) {
    task.configure {
        manifest {
            // noinspection GroovyAssignabilityCheck
            def attribute_map = [:]
            if (project.use_coremod.toBoolean()) {
                attribute_map['FMLCorePlugin'] = project.coremod_plugin_class_name
                if (project.include_mod.toBoolean()) {
                    attribute_map['FMLCorePluginContainsFMLMod'] = true
                    attribute_map['ForceLoadAsMod'] = project.gradle.startParameter.taskNames[0] == 'build'
                }
            }
            if (project.use_mixins.toBoolean()) {
                attribute_map['TweakClass'] = 'org.spongepowered.asm.launch.MixinTweaker'
            }
            if (project.has_access_transformer.toBoolean()) {
                attribute_map['FMLAT'] = project.archives_base_name + '_at.cfg'
            }
            attributes(attribute_map)
        }
    }
}
